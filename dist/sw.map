{"version":3,"sources":["sw.js"],"names":["pwaKey","gifyKey","localRes","self","addEventListener","e","request","url","match","respondWith","staticCache","cacheFallBack","clearGify","gifys","caches","open","then","cache","keys","forEach","key","includes","delete","req","fetch","networkRes","ok","put","clone","catch","err","cacheName","cacheResponse","networkResponse","console","log","resourcesAdded","addAll","reason","waitUntil","data","action"],"mappings":"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","file":"sw.map","sourceRoot":"..","sourcesContent":["let pwaKey = 'udemy-pwa1.0';\nlet gifyKey = 'gify-v0.1';\nlet localRes = ['index.html','main.js', '/images/flame.png','/images/icon.png','/images/launch.png', '/images/logo.png'\n, 'vendor/bootstrap-4.3.1-dist/css/bootstrap.min.css', 'vendor/jquery-3.3.1.js'];\n\n// intercept network request\nself.addEventListener('fetch', (e)=> {\n\n //App shell \n  if(e.request.url.match('localhost')){\n    e.respondWith(\n      staticCache(e.request, pwaKey)\n    )\n  }\n\n  //API request\n  else if(e.request.url.match('api.giphy.com/v1/gifs/trending')) {\n    e.respondWith(\n      cacheFallBack(e.request)\n    )\n  }\n\n  //Gify\n  else if(e.request.url.match('.giphy.com/media/')){\n    e.respondWith(\n      staticCache(e.request, gifyKey)\n    )\n  }\n\n})\n\n//Clear gifys that are not active on the app\nconst clearGify = (gifys)=> {\n\n  //open cache\n  caches.open(gifyKey).then((cache)=> {\n    //get cache keys\n    cache.keys().then((keys)=> {\n      keys.forEach((key)=> {\n\n        //If cache entry is not part of current gifys delete\n        if(!gifys.includes(key.url)){\n          cache.delete(key);\n        }\n      })\n    })\n  })\n}\n\n// Dynamic content: Network with cache fallback\nconst cacheFallBack = (req)=> {\n\n  return fetch(req).then((networkRes)=> {\n    //Response not ok throw an error\n    if(!networkRes.ok) {\n      throw 'Fetch error response';\n    }\n\n    //Update cache when response is okay\n    caches.open(pwaKey).then(cache => cache.put(req, networkRes))\n    return networkRes.clone();\n\n  })\n  // Check the request in the cache\n  .catch(err => caches.match(req))\n}\n\n\n// Static cache local resources with network fallback strategy\nconst staticCache = (req, cacheName) => {\n    \n  return caches.match(req).then((cacheResponse)=> {\n    if(cacheResponse){\n      return cacheResponse\n    }\n      return fetch(req).then((networkResponse)=> {\n\n          caches.open(cacheName).then((cache)=> {\n            cache.put(req, networkResponse)\n          })\n          return networkResponse.clone();\n      })\n  })\n}\n\n// Service worker installed\nself.addEventListener('install', (e)=> {\n\nconsole.log('Service worker installing')\n\n  //Open and create the cache\n  //if(window.caches) {\n    let resourcesAdded = caches.open(pwaKey).then((cache)=> {\n      return cache.addAll(localRes);\n    }).catch((reason)=> {\n      console.log(reason)\n    })\n    e.waitUntil(resourcesAdded);\n  //}\n})\n\n// Service worker installed\n// Cleanup and delete old cache\nself.addEventListener('activate', (e)=> {\n   console.log('Service worker activated')\n\n   e.waitUntil(   \n    caches.keys().then((keys)=> {\n      keys.forEach((key)=> {\n        if(key !== pwaKey && key.match('udemy')) {\n          console.log('Old cache udemy key deleted');\n          caches.delete(key);\n        }\n        if (key !== gifyKey && key.match('gify')) {\n          console.log('Old cache gify key deleted');\n          caches.delete(key);\n        }\n    })\n  }))\n\n})\n\nself.addEventListener('message', (e)=> {\n  if(e.data.action === 'clearGify'){\n    console.log('Message received to clear gifys')\n    clearGify(e.data.gifys);\n  }\n})\n\n"]}